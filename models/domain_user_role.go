// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DomainUserRole domain user role
//
// swagger:model domain.UserRole
type DomainUserRole string

func NewDomainUserRole(value DomainUserRole) *DomainUserRole {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DomainUserRole.
func (m DomainUserRole) Pointer() *DomainUserRole {
	return &m
}

const (

	// DomainUserRoleAdmin captures enum value "admin"
	DomainUserRoleAdmin DomainUserRole = "admin"

	// DomainUserRoleAppuser captures enum value "appuser"
	DomainUserRoleAppuser DomainUserRole = "appuser"
)

// for schema
var domainUserRoleEnum []any

func init() {
	var res []DomainUserRole
	if err := json.Unmarshal([]byte(`["admin","appuser"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainUserRoleEnum = append(domainUserRoleEnum, v)
	}
}

func (m DomainUserRole) validateDomainUserRoleEnum(path, location string, value DomainUserRole) error {
	if err := validate.EnumCase(path, location, value, domainUserRoleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this domain user role
func (m DomainUserRole) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDomainUserRoleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this domain user role based on context it is used
func (m DomainUserRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
