// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sm8ta/webike_user_microservice_nikita/models"
)

// PutUsersIDReader is a Reader for the PutUsersID structure.
type PutUsersIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUsersIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewPutUsersIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutUsersIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutUsersIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutUsersIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /users/{id}] PutUsersID", response, response.Code())
	}
}

// NewPutUsersIDOK creates a PutUsersIDOK with default headers values
func NewPutUsersIDOK() *PutUsersIDOK {
	return &PutUsersIDOK{}
}

/*
PutUsersIDOK describes a response with status code 200, with default header values.

Пользователь обновлен
*/
type PutUsersIDOK struct {
	Payload *PutUsersIDOKBody
}

// IsSuccess returns true when this put users Id o k response has a 2xx status code
func (o *PutUsersIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put users Id o k response has a 3xx status code
func (o *PutUsersIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put users Id o k response has a 4xx status code
func (o *PutUsersIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put users Id o k response has a 5xx status code
func (o *PutUsersIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put users Id o k response a status code equal to that given
func (o *PutUsersIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put users Id o k response
func (o *PutUsersIDOK) Code() int {
	return 200
}

func (o *PutUsersIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdOK %s", 200, payload)
}

func (o *PutUsersIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdOK %s", 200, payload)
}

func (o *PutUsersIDOK) GetPayload() *PutUsersIDOKBody {
	return o.Payload
}

func (o *PutUsersIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutUsersIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutUsersIDBadRequest creates a PutUsersIDBadRequest with default headers values
func NewPutUsersIDBadRequest() *PutUsersIDBadRequest {
	return &PutUsersIDBadRequest{}
}

/*
PutUsersIDBadRequest describes a response with status code 400, with default header values.

Неверный запрос
*/
type PutUsersIDBadRequest struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this put users Id bad request response has a 2xx status code
func (o *PutUsersIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put users Id bad request response has a 3xx status code
func (o *PutUsersIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put users Id bad request response has a 4xx status code
func (o *PutUsersIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put users Id bad request response has a 5xx status code
func (o *PutUsersIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put users Id bad request response a status code equal to that given
func (o *PutUsersIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put users Id bad request response
func (o *PutUsersIDBadRequest) Code() int {
	return 400
}

func (o *PutUsersIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdBadRequest %s", 400, payload)
}

func (o *PutUsersIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdBadRequest %s", 400, payload)
}

func (o *PutUsersIDBadRequest) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PutUsersIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutUsersIDUnauthorized creates a PutUsersIDUnauthorized with default headers values
func NewPutUsersIDUnauthorized() *PutUsersIDUnauthorized {
	return &PutUsersIDUnauthorized{}
}

/*
PutUsersIDUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type PutUsersIDUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this put users Id unauthorized response has a 2xx status code
func (o *PutUsersIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put users Id unauthorized response has a 3xx status code
func (o *PutUsersIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put users Id unauthorized response has a 4xx status code
func (o *PutUsersIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put users Id unauthorized response has a 5xx status code
func (o *PutUsersIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put users Id unauthorized response a status code equal to that given
func (o *PutUsersIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put users Id unauthorized response
func (o *PutUsersIDUnauthorized) Code() int {
	return 401
}

func (o *PutUsersIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdUnauthorized %s", 401, payload)
}

func (o *PutUsersIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdUnauthorized %s", 401, payload)
}

func (o *PutUsersIDUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PutUsersIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPutUsersIDForbidden creates a PutUsersIDForbidden with default headers values
func NewPutUsersIDForbidden() *PutUsersIDForbidden {
	return &PutUsersIDForbidden{}
}

/*
PutUsersIDForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type PutUsersIDForbidden struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this put users Id forbidden response has a 2xx status code
func (o *PutUsersIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put users Id forbidden response has a 3xx status code
func (o *PutUsersIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put users Id forbidden response has a 4xx status code
func (o *PutUsersIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put users Id forbidden response has a 5xx status code
func (o *PutUsersIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put users Id forbidden response a status code equal to that given
func (o *PutUsersIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put users Id forbidden response
func (o *PutUsersIDForbidden) Code() int {
	return 403
}

func (o *PutUsersIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdForbidden %s", 403, payload)
}

func (o *PutUsersIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdForbidden %s", 403, payload)
}

func (o *PutUsersIDForbidden) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PutUsersIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
PutUsersIDOKBody put users ID o k body
swagger:model PutUsersIDOKBody
*/
type PutUsersIDOKBody struct {
	models.HTTPSuccessResponse

	// data
	Data *models.HTTPUserDTO `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutUsersIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutUsersIDOKBodyAO0
	var putUsersIDOKBodyAO0 models.HTTPSuccessResponse
	if err := swag.ReadJSON(raw, &putUsersIDOKBodyAO0); err != nil {
		return err
	}
	o.HTTPSuccessResponse = putUsersIDOKBodyAO0

	// PutUsersIDOKBodyAO1
	var dataPutUsersIDOKBodyAO1 struct {
		Data *models.HTTPUserDTO `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPutUsersIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutUsersIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutUsersIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putUsersIDOKBodyAO0, err := swag.WriteJSON(o.HTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putUsersIDOKBodyAO0)
	var dataPutUsersIDOKBodyAO1 struct {
		Data *models.HTTPUserDTO `json:"data,omitempty"`
	}

	dataPutUsersIDOKBodyAO1.Data = o.Data

	jsonDataPutUsersIDOKBodyAO1, errPutUsersIDOKBodyAO1 := swag.WriteJSON(dataPutUsersIDOKBodyAO1)
	if errPutUsersIDOKBodyAO1 != nil {
		return nil, errPutUsersIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutUsersIDOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put users ID o k body
func (o *PutUsersIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutUsersIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("putUsersIdOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("putUsersIdOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this put users ID o k body based on the context it is used
func (o *PutUsersIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutUsersIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("putUsersIdOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("putUsersIdOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutUsersIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutUsersIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutUsersIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
