// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/sm8ta/webike_user_microservice_nikita/models"
)

// GetUsersIDReader is a Reader for the GetUsersID structure.
type GetUsersIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsersIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUsersIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUsersIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsersIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /users/{id}] GetUsersID", response, response.Code())
	}
}

// NewGetUsersIDOK creates a GetUsersIDOK with default headers values
func NewGetUsersIDOK() *GetUsersIDOK {
	return &GetUsersIDOK{}
}

/*
GetUsersIDOK describes a response with status code 200, with default header values.

Пользователь найден
*/
type GetUsersIDOK struct {
	Payload *GetUsersIDOKBody
}

// IsSuccess returns true when this get users Id o k response has a 2xx status code
func (o *GetUsersIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get users Id o k response has a 3xx status code
func (o *GetUsersIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users Id o k response has a 4xx status code
func (o *GetUsersIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get users Id o k response has a 5xx status code
func (o *GetUsersIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get users Id o k response a status code equal to that given
func (o *GetUsersIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get users Id o k response
func (o *GetUsersIDOK) Code() int {
	return 200
}

func (o *GetUsersIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}][%d] getUsersIdOK %s", 200, payload)
}

func (o *GetUsersIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}][%d] getUsersIdOK %s", 200, payload)
}

func (o *GetUsersIDOK) GetPayload() *GetUsersIDOKBody {
	return o.Payload
}

func (o *GetUsersIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUsersIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetUsersIDUnauthorized creates a GetUsersIDUnauthorized with default headers values
func NewGetUsersIDUnauthorized() *GetUsersIDUnauthorized {
	return &GetUsersIDUnauthorized{}
}

/*
GetUsersIDUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type GetUsersIDUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get users Id unauthorized response has a 2xx status code
func (o *GetUsersIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users Id unauthorized response has a 3xx status code
func (o *GetUsersIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users Id unauthorized response has a 4xx status code
func (o *GetUsersIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users Id unauthorized response has a 5xx status code
func (o *GetUsersIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get users Id unauthorized response a status code equal to that given
func (o *GetUsersIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get users Id unauthorized response
func (o *GetUsersIDUnauthorized) Code() int {
	return 401
}

func (o *GetUsersIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}][%d] getUsersIdUnauthorized %s", 401, payload)
}

func (o *GetUsersIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}][%d] getUsersIdUnauthorized %s", 401, payload)
}

func (o *GetUsersIDUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetUsersIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetUsersIDForbidden creates a GetUsersIDForbidden with default headers values
func NewGetUsersIDForbidden() *GetUsersIDForbidden {
	return &GetUsersIDForbidden{}
}

/*
GetUsersIDForbidden describes a response with status code 403, with default header values.

Доступ запрещен
*/
type GetUsersIDForbidden struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get users Id forbidden response has a 2xx status code
func (o *GetUsersIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users Id forbidden response has a 3xx status code
func (o *GetUsersIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users Id forbidden response has a 4xx status code
func (o *GetUsersIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users Id forbidden response has a 5xx status code
func (o *GetUsersIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get users Id forbidden response a status code equal to that given
func (o *GetUsersIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get users Id forbidden response
func (o *GetUsersIDForbidden) Code() int {
	return 403
}

func (o *GetUsersIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}][%d] getUsersIdForbidden %s", 403, payload)
}

func (o *GetUsersIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}][%d] getUsersIdForbidden %s", 403, payload)
}

func (o *GetUsersIDForbidden) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetUsersIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetUsersIDNotFound creates a GetUsersIDNotFound with default headers values
func NewGetUsersIDNotFound() *GetUsersIDNotFound {
	return &GetUsersIDNotFound{}
}

/*
GetUsersIDNotFound describes a response with status code 404, with default header values.

Пользователь не найден
*/
type GetUsersIDNotFound struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get users Id not found response has a 2xx status code
func (o *GetUsersIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users Id not found response has a 3xx status code
func (o *GetUsersIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users Id not found response has a 4xx status code
func (o *GetUsersIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users Id not found response has a 5xx status code
func (o *GetUsersIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get users Id not found response a status code equal to that given
func (o *GetUsersIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get users Id not found response
func (o *GetUsersIDNotFound) Code() int {
	return 404
}

func (o *GetUsersIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}][%d] getUsersIdNotFound %s", 404, payload)
}

func (o *GetUsersIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}][%d] getUsersIdNotFound %s", 404, payload)
}

func (o *GetUsersIDNotFound) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetUsersIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetUsersIDOKBody get users ID o k body
swagger:model GetUsersIDOKBody
*/
type GetUsersIDOKBody struct {
	models.HTTPSuccessResponse

	// data
	Data *models.HTTPUserDTO `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetUsersIDOKBody) UnmarshalJSON(raw []byte) error {
	// GetUsersIDOKBodyAO0
	var getUsersIDOKBodyAO0 models.HTTPSuccessResponse
	if err := swag.ReadJSON(raw, &getUsersIDOKBodyAO0); err != nil {
		return err
	}
	o.HTTPSuccessResponse = getUsersIDOKBodyAO0

	// GetUsersIDOKBodyAO1
	var dataGetUsersIDOKBodyAO1 struct {
		Data *models.HTTPUserDTO `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetUsersIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetUsersIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetUsersIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getUsersIDOKBodyAO0, err := swag.WriteJSON(o.HTTPSuccessResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getUsersIDOKBodyAO0)
	var dataGetUsersIDOKBodyAO1 struct {
		Data *models.HTTPUserDTO `json:"data,omitempty"`
	}

	dataGetUsersIDOKBodyAO1.Data = o.Data

	jsonDataGetUsersIDOKBodyAO1, errGetUsersIDOKBodyAO1 := swag.WriteJSON(dataGetUsersIDOKBodyAO1)
	if errGetUsersIDOKBodyAO1 != nil {
		return nil, errGetUsersIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetUsersIDOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get users ID o k body
func (o *GetUsersIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("getUsersIdOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("getUsersIdOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this get users ID o k body based on the context it is used
func (o *GetUsersIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.HTTPSuccessResponse
	if err := o.HTTPSuccessResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUsersIDOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("getUsersIdOK" + "." + "data")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("getUsersIdOK" + "." + "data")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUsersIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUsersIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetUsersIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
