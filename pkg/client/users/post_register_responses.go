// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sm8ta/webike_user_microservice_nikita/models"
)

// PostRegisterReader is a Reader for the PostRegister structure.
type PostRegisterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRegisterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewPostRegisterCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRegisterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostRegisterConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /register] PostRegister", response, response.Code())
	}
}

// NewPostRegisterCreated creates a PostRegisterCreated with default headers values
func NewPostRegisterCreated() *PostRegisterCreated {
	return &PostRegisterCreated{}
}

/*
PostRegisterCreated describes a response with status code 201, with default header values.

Пользователь создан
*/
type PostRegisterCreated struct {
	Payload *models.HTTPSuccessResponse
}

// IsSuccess returns true when this post register created response has a 2xx status code
func (o *PostRegisterCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post register created response has a 3xx status code
func (o *PostRegisterCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post register created response has a 4xx status code
func (o *PostRegisterCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post register created response has a 5xx status code
func (o *PostRegisterCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post register created response a status code equal to that given
func (o *PostRegisterCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post register created response
func (o *PostRegisterCreated) Code() int {
	return 201
}

func (o *PostRegisterCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /register][%d] postRegisterCreated %s", 201, payload)
}

func (o *PostRegisterCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /register][%d] postRegisterCreated %s", 201, payload)
}

func (o *PostRegisterCreated) GetPayload() *models.HTTPSuccessResponse {
	return o.Payload
}

func (o *PostRegisterCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostRegisterBadRequest creates a PostRegisterBadRequest with default headers values
func NewPostRegisterBadRequest() *PostRegisterBadRequest {
	return &PostRegisterBadRequest{}
}

/*
PostRegisterBadRequest describes a response with status code 400, with default header values.

Неверный запрос
*/
type PostRegisterBadRequest struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this post register bad request response has a 2xx status code
func (o *PostRegisterBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post register bad request response has a 3xx status code
func (o *PostRegisterBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post register bad request response has a 4xx status code
func (o *PostRegisterBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post register bad request response has a 5xx status code
func (o *PostRegisterBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post register bad request response a status code equal to that given
func (o *PostRegisterBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post register bad request response
func (o *PostRegisterBadRequest) Code() int {
	return 400
}

func (o *PostRegisterBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /register][%d] postRegisterBadRequest %s", 400, payload)
}

func (o *PostRegisterBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /register][%d] postRegisterBadRequest %s", 400, payload)
}

func (o *PostRegisterBadRequest) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PostRegisterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostRegisterConflict creates a PostRegisterConflict with default headers values
func NewPostRegisterConflict() *PostRegisterConflict {
	return &PostRegisterConflict{}
}

/*
PostRegisterConflict describes a response with status code 409, with default header values.

Email уже существует
*/
type PostRegisterConflict struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this post register conflict response has a 2xx status code
func (o *PostRegisterConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post register conflict response has a 3xx status code
func (o *PostRegisterConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post register conflict response has a 4xx status code
func (o *PostRegisterConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this post register conflict response has a 5xx status code
func (o *PostRegisterConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this post register conflict response a status code equal to that given
func (o *PostRegisterConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the post register conflict response
func (o *PostRegisterConflict) Code() int {
	return 409
}

func (o *PostRegisterConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /register][%d] postRegisterConflict %s", 409, payload)
}

func (o *PostRegisterConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /register][%d] postRegisterConflict %s", 409, payload)
}

func (o *PostRegisterConflict) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *PostRegisterConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
