// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sm8ta/webike_user_microservice_nikita/models"
)

// GetUsersIDWithBikesReader is a Reader for the GetUsersIDWithBikes structure.
type GetUsersIDWithBikesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersIDWithBikesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsersIDWithBikesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUsersIDWithBikesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsersIDWithBikesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /users/{id}/with-bikes] GetUsersIDWithBikes", response, response.Code())
	}
}

// NewGetUsersIDWithBikesOK creates a GetUsersIDWithBikesOK with default headers values
func NewGetUsersIDWithBikesOK() *GetUsersIDWithBikesOK {
	return &GetUsersIDWithBikesOK{}
}

/*
GetUsersIDWithBikesOK describes a response with status code 200, with default header values.

Пользователь с байками
*/
type GetUsersIDWithBikesOK struct {
	Payload *models.HTTPSuccessResponse
}

// IsSuccess returns true when this get users Id with bikes o k response has a 2xx status code
func (o *GetUsersIDWithBikesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get users Id with bikes o k response has a 3xx status code
func (o *GetUsersIDWithBikesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users Id with bikes o k response has a 4xx status code
func (o *GetUsersIDWithBikesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get users Id with bikes o k response has a 5xx status code
func (o *GetUsersIDWithBikesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get users Id with bikes o k response a status code equal to that given
func (o *GetUsersIDWithBikesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get users Id with bikes o k response
func (o *GetUsersIDWithBikesOK) Code() int {
	return 200
}

func (o *GetUsersIDWithBikesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}/with-bikes][%d] getUsersIdWithBikesOK %s", 200, payload)
}

func (o *GetUsersIDWithBikesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}/with-bikes][%d] getUsersIdWithBikesOK %s", 200, payload)
}

func (o *GetUsersIDWithBikesOK) GetPayload() *models.HTTPSuccessResponse {
	return o.Payload
}

func (o *GetUsersIDWithBikesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPSuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetUsersIDWithBikesUnauthorized creates a GetUsersIDWithBikesUnauthorized with default headers values
func NewGetUsersIDWithBikesUnauthorized() *GetUsersIDWithBikesUnauthorized {
	return &GetUsersIDWithBikesUnauthorized{}
}

/*
GetUsersIDWithBikesUnauthorized describes a response with status code 401, with default header values.

Не авторизован
*/
type GetUsersIDWithBikesUnauthorized struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get users Id with bikes unauthorized response has a 2xx status code
func (o *GetUsersIDWithBikesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users Id with bikes unauthorized response has a 3xx status code
func (o *GetUsersIDWithBikesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users Id with bikes unauthorized response has a 4xx status code
func (o *GetUsersIDWithBikesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users Id with bikes unauthorized response has a 5xx status code
func (o *GetUsersIDWithBikesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get users Id with bikes unauthorized response a status code equal to that given
func (o *GetUsersIDWithBikesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get users Id with bikes unauthorized response
func (o *GetUsersIDWithBikesUnauthorized) Code() int {
	return 401
}

func (o *GetUsersIDWithBikesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}/with-bikes][%d] getUsersIdWithBikesUnauthorized %s", 401, payload)
}

func (o *GetUsersIDWithBikesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}/with-bikes][%d] getUsersIdWithBikesUnauthorized %s", 401, payload)
}

func (o *GetUsersIDWithBikesUnauthorized) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetUsersIDWithBikesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetUsersIDWithBikesNotFound creates a GetUsersIDWithBikesNotFound with default headers values
func NewGetUsersIDWithBikesNotFound() *GetUsersIDWithBikesNotFound {
	return &GetUsersIDWithBikesNotFound{}
}

/*
GetUsersIDWithBikesNotFound describes a response with status code 404, with default header values.

Пользователь не найден
*/
type GetUsersIDWithBikesNotFound struct {
	Payload *models.HTTPErrorResponse
}

// IsSuccess returns true when this get users Id with bikes not found response has a 2xx status code
func (o *GetUsersIDWithBikesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get users Id with bikes not found response has a 3xx status code
func (o *GetUsersIDWithBikesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get users Id with bikes not found response has a 4xx status code
func (o *GetUsersIDWithBikesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get users Id with bikes not found response has a 5xx status code
func (o *GetUsersIDWithBikesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get users Id with bikes not found response a status code equal to that given
func (o *GetUsersIDWithBikesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get users Id with bikes not found response
func (o *GetUsersIDWithBikesNotFound) Code() int {
	return 404
}

func (o *GetUsersIDWithBikesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}/with-bikes][%d] getUsersIdWithBikesNotFound %s", 404, payload)
}

func (o *GetUsersIDWithBikesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{id}/with-bikes][%d] getUsersIdWithBikesNotFound %s", 404, payload)
}

func (o *GetUsersIDWithBikesNotFound) GetPayload() *models.HTTPErrorResponse {
	return o.Payload
}

func (o *GetUsersIDWithBikesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
